{
  "swagger": "2.0",
  "info": {
    "description": "",
    "version": "1.0",
    "title": "Data Exchange"
  },
  "host": "api.smartcity.kmitl.io",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "users"
    },
    {
      "name": "collections"
    },
    {
      "name": "tickets"
    },
    {
      "name": "credits"
    },
    {
      "name": "access control"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a new user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User_req"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/login": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "login",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "userToken": []
          }
        ]
      }
    },
    "/users/{userName}/token": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Generate access token",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "operation success",
            "schema": {
              "type": "string",
              "example": "token"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user's access token",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "access token",
            "schema": {
              "type": "string",
              "example": "token"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/users/{userName}/thumbnail": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "update user profile picture",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "thumbnail",
            "type": "file",
            "description": "Profile image in png format only."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/collections": {
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "Get all collection Metadata",
        "parameters": [
          {
            "name": "collectionId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "collectionName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "open",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "operation success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collection"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "collections"
        ],
        "summary": "Create new collection",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Collection_req"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/collections/{collectionId}": {
      "get": {
        "summary": "Get data from collection",
        "description": "Get data from collection",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "type": "string",
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "{fieldname},asc to order by ascending and {fieldname},desc to order by descending"
          }
        ],
        "responses": {
          "200": {
            "description": "operation success",
            "schema": {
              "$ref": "#/definitions/Data"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorizated"
          },
          "404": {
            "description": "Not  Found"
          }
        },
        "security": [
          {
            "ticket": []
          }
        ]
      },
      "post": {
        "summary": "Insert data to collection",
        "description": "Insert data to collection",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Data"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "operation success"
          },
          "401": {
            "description": "Unauthorizated"
          },
          "404": {
            "description": "Not  Found"
          }
        },
        "security": [
          {
            "ticket": []
          }
        ]
      },
      "delete": {
        "summary": "Delete collection",
        "description": "Delete collection",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "operation success"
          },
          "401": {
            "description": "Unauthorizated"
          },
          "404": {
            "description": "Not  Found"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/collections/{collectionId}/meta": {
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "Get collection Metadata by Id",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "operation success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collection"
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "collections"
        ],
        "summary": "Update colelction Metadata",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Collection_update"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorizated"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/collections/{collectionId}/thumbnail": {
      "put": {
        "tags": [
          "collections"
        ],
        "summary": "update collection picture",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "thumbnail",
            "type": "file",
            "description": "Profile image in png format only."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/tickets": {
      "post": {
        "summary": "Generate ticket",
        "description": "Generate ticket",
        "tags": [
          "tickets"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Ticket_req"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "operation success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/credits/{userId}": {
      "get": {
        "summary": "Get user's credit balance",
        "description": "Get user's credit balance",
        "tags": [
          "credits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "operation successful",
            "schema": {
              "$ref": "#/definitions/Credit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "userId not found"
          }
        }
      }
    },
    "/accesscontrol": {
      "put": {
        "summary": "Change or Create role",
        "description": "Change or Create role",
        "tags": [
          "access control"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Access_control_req"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "operation success",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete role",
        "description": "Delete role",
        "tags": [
          "access control"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userName": {
                  "type": "string"
                },
                "collectionId": {
                  "type": "string"
                },
                "serviceId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "operation success",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/accesscontrol/collections/{collectionId}": {
      "get": {
        "summary": "get role for collection",
        "tags": [
          "access control"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "description": "role of user"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/accesscontrol/services/{serviceId}": {
      "get": {
        "summary": "get role for service",
        "tags": [
          "access control"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "description": "role of user"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    }
  },
  "definitions": {
    "User_req": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "Collection": {
      "type": "object",
      "properties": {
        "collectionId": {
          "type": "string"
        },
        "collectionName": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "[\"timeseries\"|\"geotemporal\"|\"keyvalue\"]"
        },
        "encryptionLevel": {
          "type": "integer",
          "description": "0 - the data is not encrypted(High optimization and Indexing), 1 - the data is medium encrypted (Medium optimization and Indexing) , 2 - the data is strong encrypted (No optimization and Indexing)",
          "default": 0
        },
        "example": {
          "type": "object"
        },
        "columns": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "column name"
              },
              "type": {
                "type": "string",
                "description": "[\"varchar\"|\"int\"|\"bigint\"|\"double\"|\"text\"|\"timestamp\"]"
              },
              "indexed": {
                "type": "boolean",
                "description": "[true|false]"
              }
            }
          },
          "description": "For 'timeseries' must have column 'ts' type 'timestamp' and for 'geotemporal' must have addition column 'lat' and 'lng' type 'double'"
        },
        "createdAt": {
          "type": "number"
        },
        "isOpen": {
          "type": "boolean"
        }
      }
    },
    "Collection_req": {
      "type": "object",
      "properties": {
        "collectionName": {
          "type": "string"
        },
        "endPoint": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "location of data",
              "example": "local or remote"
            },
            "url": {
              "type": "string",
              "description": "url for request (remote only)"
            },
            "headers": {
              "type": "object",
              "description": "headers for request (remote only)",
              "properties": {
                "headers_0": {
                  "type": "string"
                },
                "headers_1": {
                  "type": "string"
                },
                "header_...": {
                  "type": "string"
                }
              }
            },
            "queryString": {
              "type": "object",
              "description": "query string for request (remote only)",
              "properties": {
                "queryString_1": {
                  "type": "string"
                },
                "queryString_2": {
                  "type": "string"
                },
                "queryString_...": {
                  "type": "string"
                }
              }
            }
          }
        },
        "type": {
          "type": "string",
          "description": "[\"timeseries\"|\"geotemporal\"|\"keyvalue\"]"
        },
        "encryptionLevel": {
          "type": "integer",
          "description": "0 - the data is not encrypted(High optimization and Indexing), 1 - the data is medium encrypted (Medium optimization and Indexing) , 2 - the data is strong encrypted (No optimization and Indexing)",
          "default": 0
        },
        "example": {
          "type": "object"
        },
        "columns": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "column name"
              },
              "type": {
                "type": "string",
                "description": "[\"varchar\"|\"int\"|\"bigint\"|\"double\"|\"text\"|\"timestamp\"]"
              },
              "indexed": {
                "type": "boolean",
                "description": "[true|false]"
              }
            }
          },
          "description": "For 'timeseries' must have column 'ts' type 'timestamp' and for 'geotemporal' must have addition column 'lat' and 'lng' type 'double'"
        },
        "isOpen": {
          "type": "boolean"
        }
      }
    },
    "Collection_update": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "isOpen": {
          "type": "boolean"
        }
      }
    },
    "Data": {
      "type": "object",
      "properties": {
        "field0": {
          "description": "data0",
          "example": "data0"
        },
        "field1": {
          "description": "data1",
          "example": "data1"
        },
        "field...": {
          "description": "data...",
          "example": "data..."
        }
      }
    },
    "Credit": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "credits": {
          "type": "number"
        }
      }
    },
    "Ticket_req": {
      "type": "object",
      "properties": {
        "collectionId": {
          "type": "string",
          "description": "collectionId"
        },
        "expire": {
          "type": "integer",
          "description": "in days (default is 180 days)",
          "default": 180
        }
      }
    },
    "Access_control_req": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "userName"
        },
        "collectionId": {
          "type": "string",
          "description": "(Optional)collectionId"
        },
        "serviceId": {
          "type": "string",
          "description": "(Optional)serviceId"
        },
        "role": {
          "type": "string",
          "description": "CONTRIBUTOR or READ"
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    },
    "userToken": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "User token"
    },
    "ticket": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Ticket"
    }
  }
}